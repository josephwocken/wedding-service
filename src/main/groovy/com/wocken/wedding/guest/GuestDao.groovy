package com.wocken.wedding.guest

import com.wocken.wedding.guest.Guest

import java.sql.Connection
import java.sql.DriverManager
import java.sql.ResultSet
import java.sql.Statement

class GuestDao {

    private final Connection connection
    private final String url
    private final String username
    private final String password

    GuestDao() {
        this.url = "jdbc:postgresql://localhost:5432/wedding_website"
        this.username = "postgres"
        this.password = "postgres"
        this.connection = DriverManager.getConnection(url, username, password)
    }

    Guest getGuestById(long guestId) {
        Statement statement = connection.createStatement()
        ResultSet rs = statement.executeQuery("SELECT * FROM guest WHERE id = $guestId LIMIT 1")
        while (rs.next()) {
            try {
                return mapToGuest(rs)
            } finally {
                statement.close()
            }
        }
    }

    List<Guest> getAllGuests() {
        Statement statement = connection.createStatement()
        ResultSet rs = statement.executeQuery("SELECT * FROM guest")
        List<Guest> guests = new ArrayList<>()
        try {
            while (rs.next()) {
                Guest guest = mapToGuest(rs)
                guests.add(guest)
            }
        } finally {
            statement.close()
        }
        return guests
    }

    void createGuest(Guest guest) {
        if (!guest) {
            return
        }
        long invitationId = guest.getInvitationId()
        String guestName = guest.guestName?.toLowerCase()
        boolean attending = guest.isAttending()
        Statement statement = connection.createStatement()
        try {
            statement.executeUpdate("INSERT INTO guest (invitation_id, name, attending) VALUES ($invitationId, '$guestName', $attending)")
        } finally {
            statement.close()
        }
    }

    void deleteGuest(long guestId) {
        Statement statement = connection.createStatement()
        try {
            statement.executeUpdate("DELETE FROM guest WHERE id = $guestId")
        } finally {
            statement.close()
        }
    }

    //TODO: validate search string isn't javascript, or code
    List<Guest> getGuestsForSearchString(String searchString) {
        if (!searchString || searchString.isEmpty()) {
            return []
        }
        String lowerCaseSearchString = searchString.toLowerCase()
        Statement statement = connection.createStatement()
        ResultSet rs = statement.executeQuery("SELECT * FROM guest WHERE name LIKE '%$lowerCaseSearchString%'")
        List<Guest> matchingGuests = new ArrayList<>()
        try {
            while (rs.next()) {
                Guest matchingGuest = mapToGuest(rs)
                matchingGuests.add(matchingGuest)
            }
        } finally {
            statement.close()
        }
        return matchingGuests
    }

    private Guest mapToGuest(ResultSet rs) {
        long retrievedGuestId = rs.getLong("id") //this might be auto-generated by the db
        String name = rs.getString("name")
        boolean attending = rs.getBoolean("attending")
        long invitationId = rs.getLong("invitation_id")
        return new Guest(retrievedGuestId, name, attending, invitationId)
    }
}
